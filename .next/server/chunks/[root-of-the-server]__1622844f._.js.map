{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/database.ts"],"sourcesContent":["import Database from 'better-sqlite3';\nimport { hash } from 'bcryptjs';\nimport path from 'path';\n\n// Database instance\nlet db: Database.Database | null = null;\n\n// Initialize database connection\nexport function initDatabase(): Database.Database {\n  if (db) return db;\n\n  const dbPath = path.join(process.cwd(), 'data', 'contracts.db');\n  \n  try {\n    db = new Database(dbPath);\n    db.pragma('journal_mode = WAL');\n    db.pragma('foreign_keys = ON');\n    \n    // Create tables\n    createTables();\n    \n    // Insert initial data\n    insertInitialData();\n    \n    console.log('Database initialized successfully');\n    return db;\n  } catch (error) {\n    console.error('Failed to initialize database:', error);\n    throw error;\n  }\n}\n\n// Create all required tables\nfunction createTables() {\n  if (!db) throw new Error('Database not initialized');\n\n  // Branches table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS branches (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      name TEXT NOT NULL,\n      code TEXT UNIQUE NOT NULL,\n      address TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n\n  // Users table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS users (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      email TEXT UNIQUE NOT NULL,\n      password_hash TEXT NOT NULL,\n      role TEXT NOT NULL CHECK (role IN ('employee', 'manager', 'admin')),\n      branch_id INTEGER,\n      signature_data TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (branch_id) REFERENCES branches(id)\n    )\n  `);\n\n  // Contracts table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS contracts (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      contract_number TEXT UNIQUE NOT NULL,\n      client_name TEXT NOT NULL,\n      client_phone TEXT,\n      client_email TEXT,\n      contract_type TEXT NOT NULL CHECK (contract_type IN ('agreement', 'concrete_supervision', 'comprehensive_supervision')),\n      branch_id INTEGER NOT NULL,\n      value DECIMAL(10,2) NOT NULL,\n      duration_months INTEGER NOT NULL,\n      status TEXT DEFAULT 'draft' CHECK (status IN ('draft', 'pending_client_signature', 'client_signed', 'employee_approved', 'fully_executed', 'archived')),\n      signing_link TEXT UNIQUE,\n      link_expires_at DATETIME,\n      locked_at DATETIME,\n      client_signed_at DATETIME,\n      employee_signed_at DATETIME,\n      management_approved_at DATETIME,\n      created_by INTEGER NOT NULL,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      services_description TEXT,\n      terms_and_conditions TEXT,\n      FOREIGN KEY (branch_id) REFERENCES branches(id),\n      FOREIGN KEY (created_by) REFERENCES users(id)\n    )\n  `);\n\n  // Payments table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS payments (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      contract_id INTEGER NOT NULL,\n      amount DECIMAL(10,2) NOT NULL,\n      due_date DATE NOT NULL,\n      paid_date DATE,\n      status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'paid', 'overdue')),\n      payment_method TEXT,\n      notes TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (contract_id) REFERENCES contracts(id) ON DELETE CASCADE\n    )\n  `);\n\n  // Signatures table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS signatures (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      contract_id INTEGER NOT NULL,\n      user_id INTEGER,\n      signature_type TEXT NOT NULL CHECK (signature_type IN ('client', 'employee', 'management_seal')),\n      signature_data TEXT NOT NULL,\n      signed_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      ip_address TEXT,\n      FOREIGN KEY (contract_id) REFERENCES contracts(id) ON DELETE CASCADE,\n      FOREIGN KEY (user_id) REFERENCES users(id)\n    )\n  `);\n\n  // Audit logs table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS audit_logs (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      user_id INTEGER,\n      action_type TEXT NOT NULL CHECK (action_type IN ('create', 'update', 'delete', 'login', 'logout', 'sign', 'approve', 'export', 'search')),\n      table_name TEXT NOT NULL,\n      record_id INTEGER,\n      old_values TEXT,\n      new_values TEXT,\n      branch_id INTEGER,\n      ip_address TEXT,\n      user_agent TEXT,\n      description TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (user_id) REFERENCES users(id),\n      FOREIGN KEY (branch_id) REFERENCES branches(id)\n    )\n  `);\n\n  // Notifications table\n  db.exec(`\n    CREATE TABLE IF NOT EXISTS notifications (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      user_id INTEGER NOT NULL,\n      type TEXT NOT NULL CHECK (type IN ('payment_due', 'contract_expiring', 'signature_required', 'contract_signed', 'payment_overdue')),\n      title TEXT NOT NULL,\n      message TEXT NOT NULL,\n      contract_id INTEGER,\n      payment_id INTEGER,\n      read BOOLEAN DEFAULT FALSE,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (user_id) REFERENCES users(id),\n      FOREIGN KEY (contract_id) REFERENCES contracts(id),\n      FOREIGN KEY (payment_id) REFERENCES payments(id)\n    )\n  `);\n\n  // Create indexes for better performance\n  db.exec(`\n    CREATE INDEX IF NOT EXISTS idx_contracts_branch_id ON contracts(branch_id);\n    CREATE INDEX IF NOT EXISTS idx_contracts_status ON contracts(status);\n    CREATE INDEX IF NOT EXISTS idx_contracts_created_by ON contracts(created_by);\n    CREATE INDEX IF NOT EXISTS idx_contracts_contract_number ON contracts(contract_number);\n    CREATE INDEX IF NOT EXISTS idx_payments_contract_id ON payments(contract_id);\n    CREATE INDEX IF NOT EXISTS idx_payments_due_date ON payments(due_date);\n    CREATE INDEX IF NOT EXISTS idx_payments_status ON payments(status);\n    CREATE INDEX IF NOT EXISTS idx_signatures_contract_id ON signatures(contract_id);\n    CREATE INDEX IF NOT EXISTS idx_audit_logs_user_id ON audit_logs(user_id);\n    CREATE INDEX IF NOT EXISTS idx_audit_logs_created_at ON audit_logs(created_at);\n    CREATE INDEX IF NOT EXISTS idx_notifications_user_id ON notifications(user_id);\n    CREATE INDEX IF NOT EXISTS idx_notifications_read ON notifications(read);\n  `);\n\n  // Create trigger to update updated_at timestamp\n  db.exec(`\n    CREATE TRIGGER IF NOT EXISTS update_contracts_timestamp \n    AFTER UPDATE ON contracts\n    BEGIN\n      UPDATE contracts SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;\n    END;\n  `);\n\n  db.exec(`\n    CREATE TRIGGER IF NOT EXISTS update_payments_timestamp \n    AFTER UPDATE ON payments\n    BEGIN\n      UPDATE payments SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;\n    END;\n  `);\n}\n\n// Insert initial data (branches and admin user)\nasync function insertInitialData() {\n  if (!db) throw new Error('Database not initialized');\n\n  // Check if branches already exist\n  const branchCount = db.prepare('SELECT COUNT(*) as count FROM branches').get() as { count: number };\n  \n  if (branchCount.count === 0) {\n    // Insert branches\n    const insertBranch = db.prepare('INSERT INTO branches (name, code, address) VALUES (?, ?, ?)');\n    \n    const branches = [\n      { name: 'جدة', code: 'JED', address: 'جدة، المملكة العربية السعودية' },\n      { name: 'مكة', code: 'MEC', address: 'مكة المكرمة، المملكة العربية السعودية' },\n      { name: 'الأحساء', code: 'AHS', address: 'الأحساء، المملكة العربية السعودية' },\n      { name: 'حلي', code: 'HAL', address: 'حلي، المملكة العربية السعودية' }\n    ];\n\n    for (const branch of branches) {\n      insertBranch.run(branch.name, branch.code, branch.address);\n    }\n\n    console.log('Initial branches inserted');\n  }\n\n  // Check if admin user exists\n  const userCount = db.prepare('SELECT COUNT(*) as count FROM users WHERE role = ?').get('admin') as { count: number };\n  \n  if (userCount.count === 0) {\n    // Create default admin user\n    const adminPassword = await hash('admin123', 12);\n    const insertUser = db.prepare('INSERT INTO users (email, password_hash, role, branch_id) VALUES (?, ?, ?, ?)');\n    \n    // Get first branch ID for admin\n    const firstBranch = db.prepare('SELECT id FROM branches ORDER BY id LIMIT 1').get() as { id: number };\n    \n    insertUser.run('admin@injazak.com', adminPassword, 'admin', firstBranch.id);\n    \n    console.log('Default admin user created: admin@injazak.com / admin123');\n  }\n}\n\n// Get database instance\nexport function getDatabase(): Database.Database {\n  if (!db) {\n    return initDatabase();\n  }\n  return db;\n}\n\n// Close database connection\nexport function closeDatabase() {\n  if (db) {\n    db.close();\n    db = null;\n  }\n}\n\n// Utility function to generate contract number\nexport function generateContractNumber(branchCode: string): string {\n  const year = new Date().getFullYear();\n  const timestamp = Date.now().toString().slice(-6);\n  return `${branchCode}-${year}-${timestamp}`;\n}\n\n// Utility function to generate signing link\nexport function generateSigningLink(): string {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < 32; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n}\n\n// Audit logging function\nexport function logAudit(params: {\n  userId?: number;\n  actionType: string;\n  tableName: string;\n  recordId?: number;\n  oldValues?: any;\n  newValues?: any;\n  branchId?: number;\n  ipAddress?: string;\n  userAgent?: string;\n  description?: string;\n}) {\n  if (!db) return;\n\n  const insertAudit = db.prepare(`\n    INSERT INTO audit_logs (\n      user_id, action_type, table_name, record_id, \n      old_values, new_values, branch_id, ip_address, \n      user_agent, description\n    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n  `);\n\n  insertAudit.run(\n    params.userId || null,\n    params.actionType,\n    params.tableName,\n    params.recordId || null,\n    params.oldValues ? JSON.stringify(params.oldValues) : null,\n    params.newValues ? JSON.stringify(params.newValues) : null,\n    params.branchId || null,\n    params.ipAddress || null,\n    params.userAgent || null,\n    params.description || null\n  );\n}\n\n// Database backup function\nexport function backupDatabase(backupPath: string) {\n  if (!db) throw new Error('Database not initialized');\n  \n  const backup = new Database(backupPath);\n  db.backup(backup);\n  backup.close();\n  \n  console.log(`Database backed up to: ${backupPath}`);\n}\n\n// Database health check\nexport function checkDatabaseHealth(): boolean {\n  try {\n    if (!db) return false;\n    \n    // Simple query to check if database is responsive\n    const result = db.prepare('SELECT 1 as test').get();\n    return result !== undefined;\n  } catch (error) {\n    console.error('Database health check failed:', error);\n    return false;\n  }\n}\n\n// Initialize database on module load\nif (typeof window === 'undefined') {\n  // Only initialize on server side\n  try {\n    initDatabase();\n  } catch (error) {\n    console.error('Failed to initialize database on startup:', error);\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 411, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { compare } from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { getDatabase, logAudit } from '@/lib/database';\nimport { User, ApiResponse } from '@/types';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, password } = await request.json();\n\n    if (!email || !password) {\n      return NextResponse.json({\n        success: false,\n        error: 'البريد الإلكتروني وكلمة المرور مطلوبان'\n      }, { status: 400 });\n    }\n\n    const db = getDatabase();\n    \n    // Get user with branch information\n    const user = db.prepare(`\n      SELECT u.*, b.name as branch_name, b.code as branch_code \n      FROM users u \n      LEFT JOIN branches b ON u.branch_id = b.id \n      WHERE u.email = ?\n    `).get(email) as any;\n\n    if (!user) {\n      return NextResponse.json({\n        success: false,\n        error: 'البريد الإلكتروني أو كلمة المرور غير صحيحة'\n      }, { status: 401 });\n    }\n\n    // Verify password\n    const isValidPassword = await compare(password, user.password_hash);\n    \n    if (!isValidPassword) {\n      return NextResponse.json({\n        success: false,\n        error: 'البريد الإلكتروني أو كلمة المرور غير صحيحة'\n      }, { status: 401 });\n    }\n\n    // Create JWT token\n    const token = jwt.sign(\n      { \n        userId: user.id, \n        email: user.email, \n        role: user.role,\n        branchId: user.branch_id \n      },\n      JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n\n    // Prepare user data (exclude password_hash)\n    const userData: User = {\n      id: user.id,\n      email: user.email,\n      password_hash: '', // Don't send password hash to client\n      role: user.role,\n      branch_id: user.branch_id,\n      branch: user.branch_name ? {\n        id: user.branch_id,\n        name: user.branch_name,\n        code: user.branch_code,\n        created_at: ''\n      } : undefined,\n      signature_data: user.signature_data,\n      created_at: user.created_at\n    };\n\n    // Log the login action\n    const clientIP = request.headers.get('x-forwarded-for') || \n                    request.headers.get('x-real-ip') || \n                    'unknown';\n    const userAgent = request.headers.get('user-agent') || 'unknown';\n\n    logAudit({\n      userId: user.id,\n      actionType: 'login',\n      tableName: 'users',\n      recordId: user.id,\n      branchId: user.branch_id,\n      ipAddress: clientIP,\n      userAgent: userAgent,\n      description: `User login: ${user.email}`\n    });\n\n    const response: ApiResponse<{ user: User; token: string }> = {\n      success: true,\n      data: {\n        user: userData,\n        token\n      },\n      message: 'تم تسجيل الدخول بنجاح'\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('Login error:', error);\n    return NextResponse.json({\n      success: false,\n      error: 'حدث خطأ في الخادم'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAGA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE9C,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,MAAM,KAAK,CAAA,GAAA,wHAAA,CAAA,cAAW,AAAD;QAErB,mCAAmC;QACnC,MAAM,OAAO,GAAG,OAAO,CAAC,CAAC;;;;;IAKzB,CAAC,EAAE,GAAG,CAAC;QAEP,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,kBAAkB;QAClB,MAAM,kBAAkB,MAAM,CAAA,GAAA,mIAAA,CAAA,UAAO,AAAD,EAAE,UAAU,KAAK,aAAa;QAElE,IAAI,CAAC,iBAAiB;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,mBAAmB;QACnB,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CACpB;YACE,QAAQ,KAAK,EAAE;YACf,OAAO,KAAK,KAAK;YACjB,MAAM,KAAK,IAAI;YACf,UAAU,KAAK,SAAS;QAC1B,GACA,YACA;YAAE,WAAW;QAAM;QAGrB,4CAA4C;QAC5C,MAAM,WAAiB;YACrB,IAAI,KAAK,EAAE;YACX,OAAO,KAAK,KAAK;YACjB,eAAe;YACf,MAAM,KAAK,IAAI;YACf,WAAW,KAAK,SAAS;YACzB,QAAQ,KAAK,WAAW,GAAG;gBACzB,IAAI,KAAK,SAAS;gBAClB,MAAM,KAAK,WAAW;gBACtB,MAAM,KAAK,WAAW;gBACtB,YAAY;YACd,IAAI;YACJ,gBAAgB,KAAK,cAAc;YACnC,YAAY,KAAK,UAAU;QAC7B;QAEA,uBAAuB;QACvB,MAAM,WAAW,QAAQ,OAAO,CAAC,GAAG,CAAC,sBACrB,QAAQ,OAAO,CAAC,GAAG,CAAC,gBACpB;QAChB,MAAM,YAAY,QAAQ,OAAO,CAAC,GAAG,CAAC,iBAAiB;QAEvD,CAAA,GAAA,wHAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,KAAK,EAAE;YACf,YAAY;YACZ,WAAW;YACX,UAAU,KAAK,EAAE;YACjB,UAAU,KAAK,SAAS;YACxB,WAAW;YACX,WAAW;YACX,aAAa,CAAC,YAAY,EAAE,KAAK,KAAK,EAAE;QAC1C;QAEA,MAAM,WAAuD;YAC3D,SAAS;YACT,MAAM;gBACJ,MAAM;gBACN;YACF;YACA,SAAS;QACX;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;QACT,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}